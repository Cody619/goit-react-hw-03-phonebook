{"version":3,"sources":["componets/PhoneBook.js","componets/Contacts.js","App.js","reportWebVitals.js","index.js"],"names":["PhoneBook","props","filter","name","number","handleSubmit","handleNameChange","handleNumberChange","handleFilterChange","onSubmit","onChange","value","type","pattern","title","required","Contacts","contacts","handleDeleteItem","map","contact","onClick","id","App","state","event","preventDefault","setState","some","alert","uuidv4","currentTarget","filterContacts","toLowerCase","includes","localStorage","getItem","this","JSON","parse","prevProps","prevState","setItem","stringify","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2348c185.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const PhoneBook = (props) => {\r\n  const {\r\n    filter,\r\n    name,\r\n    number,\r\n    handleSubmit,\r\n    handleNameChange,\r\n    handleNumberChange,\r\n    handleFilterChange,\r\n  } = props\r\n  return (\r\n    <div>\r\n      <h1>Phonebook</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <h2>Name</h2>\r\n        <input\r\n          onChange={handleNameChange}\r\n          value={name}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n        />\r\n        <h2>Number</h2>\r\n        <input\r\n          value={number}\r\n          onChange={handleNumberChange}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n        />\r\n        <button type=\"submit\">Add contact</button>\r\n      </form>\r\n      <h3>Find contacts by name</h3>\r\n      <input type=\"text\" value={filter} onChange={handleFilterChange} />\r\n    </div>\r\n  )\r\n}\r\nPhoneBook.propTypes = {\r\n  filter: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.number.isRequired,\r\n  handleSubmit: PropTypes.func.isRequired,\r\n  handleNameChange: PropTypes.func.isRequired,\r\n  handleNumberChange: PropTypes.func.isRequired,\r\n  handleFilterChange: PropTypes.func.isRequired,\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nexport const Contacts = (props) => {\r\n  const { contacts, handleDeleteItem } = props\r\n  return (\r\n    <div>\r\n      <h1>Contacts</h1>\r\n      <ul>\r\n        {contacts.map((contact) => {\r\n          return (\r\n            <li key={contact.id}>\r\n              {contact.name}: {contact.number}{' '}\r\n              <button\r\n                onClick={() => {\r\n                  handleDeleteItem(contact.id)\r\n                }}\r\n              >\r\n                delete\r\n              </button>\r\n            </li>\r\n          )\r\n        })}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\nContacts.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n  handleDeleteItem: PropTypes.func.isRequired,\r\n}\r\n","import { Component } from 'react'\nimport './App.css'\nimport { v4 as uuidv4 } from 'uuid'\nimport { PhoneBook } from './componets/PhoneBook.js'\nimport { Contacts } from './componets/Contacts'\n\nexport default class App extends Component {\n  state = {\n    contacts: [],\n    filter: '',\n    name: '',\n    number: '',\n  }\n\n  componentDidMount() {\n    if (localStorage.getItem('contacts')) {\n      this.setState({\n        contacts: JSON.parse(localStorage.getItem('contacts')),\n      })\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.contacts !== this.state.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts))\n    }\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault()\n    this.setState((state) => {\n      if (\n        state.contacts.some((contact) => {\n          return contact.name === state.name\n        })\n      ) {\n        alert(`${state.name} is already in contacts`)\n        return state\n      } else {\n        return {\n          contacts: [\n            ...state.contacts,\n            { name: state.name, id: uuidv4(), number: state.number },\n          ],\n          name: '',\n          number: '',\n        }\n      }\n    })\n  }\n\n  handleDeleteItem = (id) => {\n    this.setState((state) => {\n      return {\n        contacts: state.contacts.filter((contact) => {\n          return contact.id !== id\n        }),\n      }\n    })\n  }\n\n  handleNameChange = (event) => {\n    this.setState({ name: event.currentTarget.value })\n  }\n  handleNumberChange = (event) => {\n    this.setState({ number: event.currentTarget.value })\n  }\n\n  handleFilterChange = (event) => {\n    this.setState({ filter: event.currentTarget.value })\n  }\n  filterContacts = () => {\n    if (this.state.filter === '') {\n      return this.state.contacts\n    } else {\n      return this.state.contacts.filter((contact) => {\n        return contact.name\n          .toLowerCase()\n          .includes(this.state.filter.toLowerCase())\n      })\n    }\n  }\n  render() {\n    return (\n      <div>\n        <PhoneBook\n          filter={this.state.filter}\n          name={this.state.name}\n          number={this.state.number}\n          handleSubmit={this.handleSubmit}\n          handleNameChange={this.handleNameChange}\n          handleNumberChange={this.handleNumberChange}\n          handleFilterChange={this.handleFilterChange}\n        />\n        <Contacts\n          contacts={this.filterContacts()}\n          handleDeleteItem={this.handleDeleteItem}\n        />\n      </div>\n    )\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}